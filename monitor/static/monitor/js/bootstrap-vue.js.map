{
    "version": 3,
    "file": "bootstrap-vue.js",
    "sources": [
        "../node_modules/vue-functional-data-merge/dist/lib.esm.js",
        "../src/components/button/button-close.js",
        "../src/components/alert/alert.js",
        "../src/utils/plugins.js",
        "../src/components/alert/index.js",
        "../src/utils/object.js",
        "../src/utils/array.js",
        "../src/utils/identity.js",
        "../src/utils/pluck-props.js",
        "../src/components/link/link.js",
        "../src/components/badge/badge.js",
        "../src/components/badge/index.js",
        "../src/components/breadcrumb/breadcrumb-link.js",
        "../src/components/breadcrumb/breadcrumb-item.js",
        "../src/components/breadcrumb/breadcrumb.js",
        "../src/components/breadcrumb/index.js",
        "../src/utils/dom.js",
        "../src/components/button/button.js",
        "../src/components/button/index.js",
        "../src/components/button-group/button-group.js",
        "../src/components/button-group/index.js",
        "../src/utils/key-codes.js",
        "../src/components/button-toolbar/button-toolbar.js",
        "../src/components/button-toolbar/index.js",
        "../src/components/input-group/input-group-text.js",
        "../src/components/input-group/input-group-addon.js",
        "../src/components/input-group/input-group-prepend.js",
        "../src/components/input-group/input-group-append.js",
        "../src/components/input-group/input-group.js",
        "../src/components/input-group/index.js",
        "../src/utils/upper-first.js",
        "../src/utils/prefix-prop-name.js",
        "../src/utils/lower-first.js",
        "../src/utils/unprefix-prop-name.js",
        "../src/utils/copyProps.js",
        "../src/mixins/card-mixin.js",
        "../src/components/card/card-body.js",
        "../src/components/card/card-header.js",
        "../src/components/card/card-footer.js",
        "../src/components/card/card-img.js",
        "../src/components/card/card.js",
        "../src/components/card/card-group.js",
        "../src/components/card/index.js",
        "../src/utils/observe-dom.js",
        "../src/mixins/id.js",
        "../src/components/carousel/carousel.js",
        "../src/components/image/img.js",
        "../src/utils/warn.js",
        "../src/components/carousel/carousel-slide.js",
        "../src/components/carousel/index.js",
        "../src/components/layout/container.js",
        "../src/components/layout/row.js",
        "../src/utils/memoize.js",
        "../src/utils/suffix-prop-name.js",
        "../src/components/layout/col.js",
        "../src/components/layout/form-row.js",
        "../src/components/layout/index.js",
        "../src/mixins/listen-on-root.js",
        "../src/components/collapse/collapse.js",
        "../src/utils/target.js",
        "../src/directives/toggle/toggle.js",
        "../src/directives/toggle/index.js",
        "../src/components/collapse/index.js",
        "../node_modules/popper.js/dist/esm/popper.js",
        "../src/mixins/clickout.js",
        "../src/utils/bv-event.class.js",
        "../src/mixins/dropdown.js",
        "../src/components/dropdown/dropdown.js",
        "../src/components/dropdown/dropdown-item.js",
        "../src/components/dropdown/dropdown-item-button.js",
        "../src/components/dropdown/dropdown-header.js",
        "../src/components/dropdown/dropdown-divider.js",
        "../src/components/dropdown/index.js",
        "../src/components/embed/embed.js",
        "../src/components/embed/index.js",
        "../src/components/form/form.js",
        "../src/components/form/form-text.js",
        "../src/components/form/form-invalid-feedback.js",
        "../src/components/form/form-valid-feedback.js",
        "../src/components/form/index.js",
        "../src/mixins/form-state.js",
        "../src/components/form-group/form-group.js",
        "../src/components/form-group/index.js",
        "../src/mixins/form-radio-check.js",
        "../src/mixins/form.js",
        "../src/mixins/form-size.js",
        "../src/mixins/form-custom.js",
        "../src/utils/loose-equal.js",
        "../src/components/form-checkbox/form-checkbox.js",
        "../src/mixins/form-options.js",
        "../src/components/form-checkbox/form-checkbox-group.js",
        "../src/components/form-checkbox/index.js",
        "../src/components/form-radio/form-radio.js",
        "../src/components/form-radio/form-radio-group.js",
        "../src/components/form-radio/index.js",
        "../src/components/form-input/form-input.js",
        "../src/components/form-input/index.js",
        "../src/components/form-textarea/form-textarea.js",
        "../src/components/form-textarea/index.js",
        "../src/components/form-file/form-file.js",
        "../src/components/form-file/index.js",
        "../src/components/form-select/form-select.js",
        "../src/components/form-select/index.js",
        "../src/components/image/img-lazy.js",
        "../src/components/image/index.js",
        "../src/components/jumbotron/jumbotron.js",
        "../src/components/jumbotron/index.js",
        "../src/components/link/index.js",
        "../src/components/list-group/list-group.js",
        "../src/components/list-group/list-group-item.js",
        "../src/components/list-group/index.js",
        "../src/components/media/media-body.js",
        "../src/components/media/media-aside.js",
        "../src/components/media/media.js",
        "../src/components/media/index.js",
        "../src/components/modal/modal.js",
        "../src/directives/modal/modal.js",
        "../src/directives/modal/index.js",
        "../src/components/modal/index.js",
        "../src/components/nav/nav.js",
        "../src/components/nav/nav-item.js",
        "../src/components/nav/nav-text.js",
        "../src/components/nav/nav-form.js",
        "../src/components/nav/nav-item-dropdown.js",
        "../src/components/nav/index.js",
        "../src/components/navbar/navbar.js",
        "../src/components/navbar/navbar-nav.js",
        "../src/components/navbar/navbar-brand.js",
        "../src/components/navbar/navbar-toggle.js",
        "../src/components/navbar/index.js",
        "../src/utils/range.js",
        "../src/mixins/pagination.js",
        "../src/components/pagination/pagination.js",
        "../src/components/pagination/index.js",
        "../src/components/pagination-nav/pagination-nav.js",
        "../src/components/pagination-nav/index.js",
        "../src/utils/tooltip.class.js",
        "../src/utils/popover.class.js",
        "../src/utils/ssr.js",
        "../src/mixins/toolpop.js",
        "../src/components/popover/popover.js",
        "../src/components/popover/index.js",
        "../src/components/progress/progress-bar.js",
        "../src/components/progress/progress.js",
        "../src/components/progress/index.js",
        "../node_modules/lodash.startcase/index.js",
        "../node_modules/lodash.get/index.js",
        "../src/utils/stable-sort.js",
        "../src/components/table/table.js",
        "../src/components/table/index.js",
        "../src/components/tabs/tabs.js",
        "../src/components/tabs/tab.js",
        "../src/components/tabs/index.js",
        "../src/components/tooltip/tooltip.js",
        "../src/components/tooltip/index.js",
        "../src/directives/scrollspy/scrollspy.class.js",
        "../src/directives/scrollspy/scrollspy.js",
        "../src/directives/scrollspy/index.js",
        "../src/directives/tooltip/tooltip.js",
        "../src/directives/tooltip/index.js",
        "../src/directives/popover/popover.js",
        "../src/directives/popover/index.js",
        "../src/index.js"
    ],
    "sourcesContent": [
        "var __assign=Object.assign||function(e){for(var a,s=1,t=arguments.length;s<t;s++)for(var r in a=arguments[s])Object.prototype.hasOwnProperty.call(a,r)&&(e[r]=a[r]);return e};function mergeData(){for(var e,a,s={},t=arguments.length;t--;)for(var r=0,c=Object.keys(arguments[t]);r<c.length;r++)switch(e=c[r]){case\"class\":case\"style\":case\"directives\":Array.isArray(s[e])||(s[e]=[]),s[e]=s[e].concat(arguments[t][e]);break;case\"staticClass\":if(!arguments[t][e])break;void 0===s[e]&&(s[e]=\"\"),s[e]&&(s[e]+=\" \"),s[e]+=arguments[t][e].trim();break;case\"on\":case\"nativeOn\":s[e]||(s[e]={});for(var o=0,n=Object.keys(arguments[t][e]||{});o<n.length;o++)a=n[o],s[e][a]?s[e][a]=[].concat(s[e][a],arguments[t][e][a]):s[e][a]=arguments[t][e][a];break;case\"attrs\":case\"props\":case\"domProps\":case\"scopedSlots\":case\"staticStyle\":case\"hook\":case\"transition\":s[e]||(s[e]={}),s[e]=__assign({},arguments[t][e],s[e]);break;case\"slot\":case\"key\":case\"ref\":case\"tag\":case\"show\":case\"keepAlive\":default:s[e]||(s[e]=arguments[t][e])}return s}export{mergeData};\n//# sourceMappingURL=lib.esm.js.map\n",
        "import { mergeData } from 'vue-functional-data-merge'\n\nconst props = {\n  disabled: {\n    type: Boolean,\n    default: false\n  },\n  ariaLabel: {\n    type: String,\n    default: 'Close'\n  },\n  textVariant: {\n    type: String,\n    default: null\n  }\n}\n\nexport default {\n  functional: true,\n  props,\n  render (h, { props, data, listeners, slots }) {\n    const componentData = {\n      staticClass: 'close',\n      class: {\n        [`text-${props.textVariant}`]: props.textVariant\n      },\n      attrs: {\n        type: 'button',\n        disabled: props.disabled,\n        'aria-label': props.ariaLabel ? String(props.ariaLabel) : null\n      },\n      on: {\n        click (e) {\n          // Ensure click on button HTML content is also disabled\n          if (props.disabled && e instanceof Event) {\n            e.stopPropagation()\n            e.preventDefault()\n          }\n        }\n      }\n    }\n    // Careful not to override the slot with innerHTML\n    if (!slots().default) {\n      componentData.domProps = { innerHTML: '&times;' }\n    }\n    return h('button', mergeData(data, componentData), slots().default)\n  }\n}\n",
        "import bButtonClose from '../button/button-close'\n\nimport './alert.css'\n\nexport default {\n  components: {bButtonClose},\n  render (h) {\n    if (!this.localShow) {\n      // If not showing, render placeholder\n      return h(false)\n    }\n    let dismissBtn = h(false)\n    if (this.dismissible) {\n      // Add dismiss button\n      dismissBtn = h(\n        'b-button-close',\n        { attrs: { 'aria-label': this.dismissLabel }, on: { click: this.dismiss } },\n        [ this.$slots.dismiss ]\n      )\n    }\n    const alert = h(\n      'div',\n      {class: this.classObject, attrs: {role: 'alert', 'aria-live': 'polite', 'aria-atomic': true}},\n      [dismissBtn, this.$slots.default]\n    )\n    return !this.fade ? alert : h(\n      'transition',\n      { props: { name: 'fade', appear: true } },\n      [ alert ]\n    )\n  },\n  model: {\n    prop: 'show',\n    event: 'input'\n  },\n  data () {\n    return {\n      countDownTimerId: null,\n      dismissed: false\n    }\n  },\n  computed: {\n    classObject () {\n      return ['alert', this.alertVariant, this.dismissible ? 'alert-dismissible' : '']\n    },\n    alertVariant () {\n      const variant = this.variant\n      return `alert-${variant}`\n    },\n    localShow () {\n      return !this.dismissed && (this.countDownTimerId || this.show)\n    }\n  },\n  props: {\n    variant: {\n      type: String,\n      default: 'info'\n    },\n    dismissible: {\n      type: Boolean,\n      default: false\n    },\n    dismissLabel: {\n      type: String,\n      default: 'Close'\n    },\n    show: {\n      type: [Boolean, Number],\n      default: false\n    },\n    fade: {\n      type: Boolean,\n      default: false\n    }\n  },\n  watch: {\n    show () {\n      this.showChanged()\n    }\n  },\n  mounted () {\n    this.showChanged()\n  },\n  destroyed /* istanbul ignore next */ () {\n    this.clearCounter()\n  },\n  methods: {\n    dismiss () {\n      this.clearCounter()\n      this.dismissed = true\n      this.$emit('dismissed')\n      this.$emit('input', false)\n      if (typeof this.show === 'number') {\n        this.$emit('dismiss-count-down', 0)\n        this.$emit('input', 0)\n      } else {\n        this.$emit('input', false)\n      }\n    },\n    clearCounter () {\n      if (this.countDownTimerId) {\n        clearInterval(this.countDownTimerId)\n        this.countDownTimerId = null\n      }\n    },\n    showChanged () {\n      // Reset counter status\n      this.clearCounter()\n      // Reset dismiss status\n      this.dismissed = false\n      // No timer for boolean values\n      if (this.show === true || this.show === false || this.show === null || this.show === 0) {\n        return\n      }\n      // Start counter\n      let dismissCountDown = this.show\n      this.countDownTimerId = setInterval(() => {\n        if (dismissCountDown < 1) {\n          this.dismiss()\n          return\n        }\n        dismissCountDown--\n        this.$emit('dismiss-count-down', dismissCountDown)\n        this.$emit('input', dismissCountDown)\n      }, 1000)\n    }\n  }\n}\n",
        "/**\n * Register a component plugin as being loaded. returns true if compoent plugin already registered\n * @param {object} Vue\n * @param {string} Component name\n * @param {object} Component definition\n */\nexport function registerComponent (Vue, name, def) {\n  Vue._bootstrap_vue_components_ = Vue._bootstrap_vue_components_ || {}\n  const loaded = Vue._bootstrap_vue_components_[name]\n  if (!loaded && def && name) {\n    Vue._bootstrap_vue_components_[name] = true\n    Vue.component(name, def)\n  }\n  return loaded\n}\n\n/**\n * Register a group of components as being loaded.\n * @param {object} Vue\n * @param {object} Object of component definitions\n */\nexport function registerComponents (Vue, components) {\n  for (let component in components) {\n    registerComponent(Vue, component, components[component])\n  }\n}\n\n/**\n * Register a directive as being loaded. returns true if directive plugin already registered\n * @param {object} Vue\n * @param {string} Directive name\n * @param {object} Directive definition\n */\nexport function registerDirective (Vue, name, def) {\n  Vue._bootstrap_vue_directives_ = Vue._bootstrap_vue_directives_ || {}\n  const loaded = Vue._bootstrap_vue_directives_[name]\n  if (!loaded && def && name) {\n    Vue._bootstrap_vue_directives_[name] = true\n    Vue.directive(name, def)\n  }\n  return loaded\n}\n\n/**\n * Register a group of directives as being loaded.\n * @param {object} Vue\n * @param {object} Object of directive definitions\n */\nexport function registerDirectives (Vue, directives) {\n  for (let directive in directives) {\n    registerDirective(Vue, directive, directives[directive])\n  }\n}\n\n/**\n * Install plugin if window.Vue available\n * @param {object} Plugin definition\n */\nexport function vueUse (VuePlugin) {\n  if (typeof window !== 'undefined' && window.Vue) {\n    window.Vue.use(VuePlugin)\n  }\n}\n",
        "import bAlert from './alert'\nimport { registerComponents, vueUse } from '../../utils/plugins'\n\nconst components = {\n  bAlert\n}\n\nconst VuePlugin = {\n  install (Vue) {\n    registerComponents(Vue, components)\n  }\n}\n\nvueUse(VuePlugin)\n\nexport default VuePlugin\n",
        "/**\n * Aliasing Object[method] allows the minifier to shorten methods to a single character variable,\n * as well as giving BV a chance to inject polyfills.\n * As long as we avoid\n * - import * as Object from \"utils/object\"\n * all unused exports should be removed by tree-shaking.\n */\n\n// @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\nif (typeof Object.assign !== 'function') {\n  Object.assign = function (target, varArgs) {\n    // .length of function is 2\n\n    if (target == null) {\n      // TypeError if undefined or null\n      throw new TypeError('Cannot convert undefined or null to object')\n    }\n\n    let to = Object(target)\n\n    for (let index = 1; index < arguments.length; index++) {\n      const nextSource = arguments[index]\n\n      if (nextSource != null) {\n        // Skip over if undefined or null\n        for (const nextKey in nextSource) {\n          // Avoid bugs when hasOwnProperty is shadowed\n          if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n            to[nextKey] = nextSource[nextKey]\n          }\n        }\n      }\n    }\n    return to\n  }\n}\n\n// @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is#Polyfill\nif (!Object.is) {\n  Object.is = function (x, y) {\n    // SameValue algorithm\n    if (x === y) { // Steps 1-5, 7-10\n      // Steps 6.b-6.e: +0 != -0\n      return x !== 0 || 1 / x === 1 / y\n    } else {\n      // Step 6.a: NaN == NaN\n      // eslint-disable-next-line no-self-compare\n      return x !== x && y !== y\n    }\n  }\n}\n\nexport const assign = Object.assign\nexport const getOwnPropertyNames = Object.getOwnPropertyNames\nexport const keys = Object.keys\nexport const defineProperties = Object.defineProperties\nexport const defineProperty = Object.defineProperty\nexport const freeze = Object.freeze\nexport const getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor\nexport const getOwnPropertySymbols = Object.getOwnPropertySymbols\nexport const getPrototypeOf = Object.getPrototypeOf\nexport const create = Object.create\nexport const isFrozen = Object.isFrozen\nexport const is = Object.is\n\nexport function readonlyDescriptor () {\n  return { enumerable: true, configurable: false, writable: false }\n}\n",
        "// Production steps of ECMA-262, Edition 6, 22.1.2.1\n// es6-ified by @alexsasharegan\nif (!Array.from) {\n  Array.from = (function () {\n    const toStr = Object.prototype.toString\n    const isCallable = fn => typeof fn === 'function' || toStr.call(fn) === '[object Function]'\n    const toInteger = value => {\n      const number = Number(value)\n      if (isNaN(number)) {\n        return 0\n      }\n      if (number === 0 || !isFinite(number)) {\n        return number\n      }\n      return (number > 0 ? 1 : -1) * Math.floor(Math.abs(number))\n    }\n    const maxSafeInteger = Math.pow(2, 53) - 1\n    const toLength = value => Math.min(Math.max(toInteger(value), 0), maxSafeInteger)\n\n    // The length property of the from method is 1.\n    return function from (arrayLike /*, mapFn, thisArg */) {\n      // 1. Let C be the this value.\n      const C = this\n\n      // 2. Let items be ToObject(arrayLike).\n      const items = Object(arrayLike)\n\n      // 3. ReturnIfAbrupt(items).\n      if (arrayLike == null) {\n        throw new TypeError('Array.from requires an array-like object - not null or undefined')\n      }\n\n      // 4. If mapfn is undefined, then let mapping be false.\n      const mapFn = arguments.length > 1 ? arguments[1] : void undefined\n      let T\n\n      if (typeof mapFn !== 'undefined') {\n        // 5. else\n        // 5. a If IsCallable(mapfn) is false, throw a TypeError exception.\n        if (!isCallable(mapFn)) {\n          throw new TypeError('Array.from: when provided, the second argument must be a function')\n        }\n\n        // 5. b. If thisArg was supplied, let T be thisArg; else let T be undefined.\n        if (arguments.length > 2) {\n          T = arguments[2]\n        }\n      }\n\n      // 10. Let lenValue be Get(items, \"length\").\n      // 11. Let len be ToLength(lenValue).\n      const len = toLength(items.length)\n\n      // 13. If IsConstructor(C) is true, then\n      // 13. a. Let A be the result of calling the [[Construct]] internal method\n      // of C with an argument list containing the single item len.\n      // 14. a. Else, Let A be ArrayCreate(len).\n      let A = isCallable(C) ? Object(new C(len)) : new Array(len)\n\n      // 16. Let k be 0.\n      let k = 0\n      // 17. Repeat, while k < len… (also steps a - h)\n      let kValue\n      while (k < len) {\n        kValue = items[k]\n        if (mapFn) {\n          A[k] = typeof T === 'undefined' ? mapFn(kValue, k) : mapFn.call(T, kValue, k)\n        } else {\n          A[k] = kValue\n        }\n        k += 1\n      }\n      // 18. Let putStatus be Put(A, \"length\", len, true).\n      A.length = len\n      // 20. Return A.\n      return A\n    }\n  })()\n}\n\n// https://tc39.github.io/ecma262/#sec-array.prototype.find\n// Needed for IE support\nif (!Array.prototype.find) {\n  // eslint-disable-next-line no-extend-native\n  Object.defineProperty(Array.prototype, 'find', {\n    value: function (predicate) {\n      // 1. Let O be ? ToObject(this value).\n      if (this == null) {\n        throw new TypeError('\"this\" is null or not defined')\n      }\n\n      const o = Object(this)\n\n      // 2. Let len be ? ToLength(? Get(O, \"length\")).\n      const len = o.length >>> 0\n\n      // 3. If IsCallable(predicate) is false, throw a TypeError exception.\n      if (typeof predicate !== 'function') {\n        throw new TypeError('predicate must be a function')\n      }\n\n      // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.\n      const thisArg = arguments[1]\n\n      // 5. Let k be 0.\n      let k = 0\n\n      // 6. Repeat, while k < len\n      while (k < len) {\n        // a. Let Pk be ! ToString(k).\n        // b. Let kValue be ? Get(O, Pk).\n        // c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).\n        // d. If testResult is true, return kValue.\n        const kValue = o[k]\n        if (predicate.call(thisArg, kValue, k, o)) {\n          return kValue\n        }\n        // e. Increase k by 1.\n        k++\n      }\n\n      // 7. Return undefined.\n      return undefined\n    }\n  })\n}\n\nif (!Array.isArray) {\n  Array.isArray = arg => Object.prototype.toString.call(arg) === '[object Array]'\n}\n\n// Static\nexport const from = Array.from\nexport const isArray = Array.isArray\n\n// Instance\nexport const arrayIncludes = (array, value) => array.indexOf(value) !== -1\nexport const arrayFind = (array, fn, thisArg) => array.find(fn, thisArg)\nexport function concat () {\n  return Array.prototype.concat.apply([], arguments)\n}\n",
        "export default function identity (x) {\n  return x\n}\n",
        "import { keys } from './object'\nimport { isArray } from './array'\nimport identity from './identity'\n\n/**\n * Given an array of properties or an object of property keys,\n * plucks all the values off the target object.\n * @param {{}|string[]} keysToPluck\n * @param {{}} objToPluck\n * @param {Function} transformFn\n * @return {{}}\n */\nexport default function pluckProps (keysToPluck, objToPluck, transformFn = identity) {\n  return (isArray(keysToPluck) ? keysToPluck.slice() : keys(keysToPluck)).reduce((memo, prop) => {\n    // eslint-disable-next-line no-sequences\n    return (memo[transformFn(prop)] = objToPluck[prop]), memo\n  }, {})\n}\n",
        "import { assign, keys } from '../../utils/object'\nimport { arrayIncludes, concat } from '../../utils/array'\nimport { mergeData } from 'vue-functional-data-merge'\n\n/**\n * The Link component is used in many other BV components.\n * As such, sharing its props makes supporting all its features easier.\n * However, some components need to modify the defaults for their own purpose.\n * Prefer sharing a fresh copy of the props to ensure mutations\n * do not affect other component references to the props.\n *\n * https://github.com/vuejs/vue-router/blob/dev/src/components/link.js\n * @return {{}}\n */\nexport function propsFactory () {\n  return {\n    href: {\n      type: String,\n      default: null\n    },\n    rel: {\n      type: String,\n      default: null\n    },\n    target: {\n      type: String,\n      default: '_self'\n    },\n    active: {\n      type: Boolean,\n      default: false\n    },\n    activeClass: {\n      type: String,\n      default: 'active'\n    },\n    append: {\n      type: Boolean,\n      default: false\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    event: {\n      type: [String, Array],\n      default: 'click'\n    },\n    exact: {\n      type: Boolean,\n      default: false\n    },\n    exactActiveClass: {\n      type: String,\n      default: 'active'\n    },\n    replace: {\n      type: Boolean,\n      default: false\n    },\n    routerTag: {\n      type: String,\n      default: 'a'\n    },\n    to: {\n      type: [String, Object],\n      default: null\n    }\n  }\n}\n\nexport const props = propsFactory()\n\nexport function pickLinkProps (propsToPick) {\n  const freshLinkProps = propsFactory()\n  // Normalize everything to array.\n  propsToPick = concat(propsToPick)\n\n  return keys(freshLinkProps).reduce((memo, prop) => {\n    if (arrayIncludes(propsToPick, prop)) {\n      memo[prop] = freshLinkProps[prop]\n    }\n\n    return memo\n  }, {})\n}\n\nexport function omitLinkProps (propsToOmit) {\n  const freshLinkProps = propsFactory()\n  // Normalize everything to array.\n  propsToOmit = concat(propsToOmit)\n\n  return keys(props).reduce((memo, prop) => {\n    if (!arrayIncludes(propsToOmit, prop)) {\n      memo[prop] = freshLinkProps[prop]\n    }\n\n    return memo\n  }, {})\n}\n\nexport const computed = {\n  linkProps () {\n    let linkProps = {}\n    let propKeys = keys(props)\n\n    for (let i = 0; i < propKeys.length; i++) {\n      const prop = propKeys[i]\n      // Computed Vue getters are bound to the instance.\n      linkProps[prop] = this[prop]\n    }\n\n    return linkProps\n  }\n}\n\nfunction computeTag (props, parent) {\n  return Boolean(parent.$router) && props.to && !props.disabled ? 'router-link' : 'a'\n}\n\nfunction computeHref ({ disabled, href, to }, tag) {\n  // We've already checked the parent.$router in computeTag,\n  // so router-link means live router.\n  // When deferring to Vue Router's router-link,\n  // don't use the href attr at all.\n  // Must return undefined for router-link to populate href.\n  if (tag === 'router-link') return void 0\n  // If href explicitly provided\n  if (href) return href\n  // Reconstruct href when `to` used, but no router\n  if (to) {\n    // Fallback to `to` prop (if `to` is a string)\n    if (typeof to === 'string') return to\n    // Fallback to `to.path` prop (if `to` is an object)\n    if (typeof to === 'object' && typeof to.path === 'string') return to.path\n  }\n  // If nothing is provided use '#'\n  return '#'\n}\n\nfunction computeRel ({ target, rel }) {\n  if (target === '_blank' && rel === null) {\n    return 'noopener'\n  }\n  return rel || null\n}\n\nfunction clickHandlerFactory ({ disabled, tag, href, suppliedHandler, parent }) {\n  const isRouterLink = tag === 'router-link'\n\n  return function onClick (e) {\n    if (disabled && e instanceof Event) {\n      // Stop event from bubbling up.\n      e.stopPropagation()\n      // Kill the event loop attached to this specific EventTarget.\n      e.stopImmediatePropagation()\n    } else {\n      parent.$root.$emit('clicked::link', e)\n\n      if (isRouterLink && e.target.__vue__) {\n        e.target.__vue__.$emit('click', e)\n      }\n      if (typeof suppliedHandler === 'function') {\n        suppliedHandler(...arguments)\n      }\n    }\n\n    if ((!isRouterLink && href === '#') || disabled) {\n      // Stop scroll-to-top behavior or navigation.\n      e.preventDefault()\n    }\n  }\n}\n\nexport default {\n  functional: true,\n  props: propsFactory(),\n  render (h, { props, data, parent, children }) {\n    const tag = computeTag(props, parent)\n    const rel = computeRel(props)\n    const href = computeHref(props, tag)\n    const eventType = tag === 'router-link' ? 'nativeOn' : 'on'\n    const suppliedHandler = (data[eventType] || {}).click\n    const handlers = { click: clickHandlerFactory({ tag, href, disabled: props.disabled, suppliedHandler, parent }) }\n\n    const componentData = mergeData(data, {\n      class: [\n        props.active ? (props.exact ? props.exactActiveClass : props.activeClass) : null,\n        { disabled: props.disabled }\n      ],\n      attrs: {\n        rel,\n        href,\n        target: props.target,\n        tabindex: props.disabled ? '-1' : (data.attrs ? data.attrs.tabindex : null),\n        'aria-disabled': (tag === 'a' && props.disabled) ? 'true' : null\n      },\n      props: assign(props, { tag: props.routerTag })\n    })\n\n    // If href prop exists on router-link (even undefined or null) it fails working on SSR\n    if (!componentData.attrs.href) {\n      delete componentData.attrs.href\n    }\n\n    // We want to overwrite any click handler since our callback\n    // will invoke the supplied handler if !props.disabled\n    componentData[eventType] = assign(componentData[eventType] || {}, handlers)\n\n    return h(tag, componentData, children)\n  }\n}\n",
        "import { mergeData } from 'vue-functional-data-merge'\n\nimport pluckProps from '../../utils/pluck-props'\nimport { assign } from '../../utils/object'\nimport Link, { propsFactory as linkPropsFactory } from '../link/link'\n\nlet linkProps = linkPropsFactory()\ndelete linkProps.href.default\ndelete linkProps.to.default\n\nexport const props = assign(linkProps, {\n  tag: {\n    type: String,\n    default: 'span'\n  },\n  variant: {\n    type: String,\n    default: 'secondary'\n  },\n  pill: {\n    type: Boolean,\n    default: false\n  }\n})\n\nexport default {\n  functional: true,\n  props,\n  render (h, { props, data, children }) {\n    const tag = !props.href && !props.to ? props.tag : Link\n\n    const componentData = {\n      staticClass: 'badge',\n      class: [\n        !props.variant ? 'badge-secondary' : `badge-${props.variant}`,\n        {\n          'badge-pill': Boolean(props.pill),\n          active: props.active,\n          disabled: props.disabled\n        }\n      ],\n      props: pluckProps(linkProps, props)\n    }\n\n    return h(tag, mergeData(data, componentData), children)\n  }\n}\n",
        "import bBadge from './badge'\nimport { registerComponents, vueUse } from '../../utils/plugins'\n\nconst components = {\n  bBadge\n}\n\nconst VuePlugin = {\n  install (Vue) {\n    registerComponents(Vue, components)\n  }\n}\n\nvueUse(VuePlugin)\n\nexport default VuePlugin\n",
        "import { mergeData } from 'vue-functional-data-merge'\nimport pluckProps from '../../utils/pluck-props'\nimport { assign } from '../../utils/object'\nimport Link, { propsFactory as linkPropsFactory } from '../link/link'\n\nexport const props = assign(linkPropsFactory(), {\n  text: {\n    type: String,\n    default: null\n  },\n  active: {\n    type: Boolean,\n    default: false\n  },\n  href: {\n    type: String,\n    default: '#'\n  },\n  ariaCurrent: {\n    type: String,\n    default: 'location'\n  }\n})\n\nexport default {\n  functional: true,\n  props,\n  render (h, { props: suppliedProps, data, children }) {\n    const tag = suppliedProps.active ? 'span' : Link\n\n    let componentData = { props: pluckProps(props, suppliedProps) }\n    if (suppliedProps.active) {\n      componentData.attrs = { 'aria-current': suppliedProps.ariaCurrent }\n    } else {\n      componentData.attrs = { href: suppliedProps.href }\n    }\n\n    return h(tag, mergeData(data, componentData), children || suppliedProps.text)\n  }\n}\n",
        "import { mergeData } from 'vue-functional-data-merge'\nimport { assign } from '../../utils/object'\nimport BreadcrumbLink, { props as crumbLinks } from './breadcrumb-link'\n\nexport const props = assign({}, crumbLinks, {\n  text: {\n    type: String,\n    default: null\n  },\n  href: {\n    type: String,\n    default: null\n  }\n})\n\nexport default {\n  functional: true,\n  props,\n  render (h, { props, data, children }) {\n    return h(\n      'li',\n      mergeData(data, {\n        staticClass: 'breadcrumb-item',\n        class: { active: props.active },\n        attrs: { role: 'presentation' }\n      }),\n      [h(BreadcrumbLink, { props }, children)]\n    )\n  }\n}\n",
        "import { mergeData } from 'vue-functional-data-merge'\nimport { isArray } from '../../utils/array'\nimport { assign } from '../../utils/object'\nimport BreadcrumbItem from './breadcrumb-item'\n\nexport const props = {\n  items: {\n    type: Array,\n    default: null\n  }\n}\n\nexport default {\n  functional: true,\n  props,\n  render (h, { props, data, children }) {\n    let childNodes = children\n    // Build child nodes from items if given.\n    if (isArray(props.items)) {\n      let activeDefined = false\n      childNodes = props.items.map((item, idx) => {\n        if (typeof item !== 'object') {\n          item = { text: item }\n        }\n        // Copy the value here so we can normalize it.\n        let active = item.active\n        if (active) {\n          activeDefined = true\n        }\n        if (!active && !activeDefined) {\n          // Auto-detect active by position in list.\n          active = idx + 1 === props.items.length\n        }\n\n        return h(BreadcrumbItem, { props: assign({}, item, { active }) })\n      })\n    }\n\n    return h('ol', mergeData(data, { staticClass: 'breadcrumb' }), childNodes)\n  }\n}\n",
        "import bBreadcrumb from './breadcrumb'\nimport bBreadcrumbItem from './breadcrumb-item'\nimport bBreadcrumbLink from './breadcrumb-link'\nimport { registerComponents, vueUse } from '../../utils/plugins'\n\nconst components = {\n  bBreadcrumb,\n  bBreadcrumbItem,\n  bBreadcrumbLink\n}\n\nconst VuePlugin = {\n  install (Vue) {\n    registerComponents(Vue, components)\n  }\n}\n\nvueUse(VuePlugin)\n\nexport default VuePlugin\n",
        "import { from as arrayFrom } from './array'\n\n// Determine if an element is an HTML Element\nexport const isElement = el => {\n  return el && el.nodeType === Node.ELEMENT_NODE\n}\n\n// Determine if an HTML element is visible - Faster than CSS check\nexport const isVisible = el => {\n  return isElement(el) &&\n           document.body.contains(el) &&\n           el.getBoundingClientRect().height > 0 &&\n           el.getBoundingClientRect().width > 0\n}\n\n// Determine if an element is disabled\nexport const isDisabled = el => {\n  return !isElement(el) ||\n           el.disabled ||\n           el.classList.contains('disabled') ||\n           Boolean(el.getAttribute('disabled'))\n}\n\n// Cause/wait-for an element to reflow it's content (adjusting it's height/width)\nexport const reflow = el => {\n  // requsting an elements offsetHight will trigger a reflow of the element content\n  return isElement(el) && el.offsetHeight\n}\n\n// Select all elements matching selector. Returns [] if none found\nexport const selectAll = (selector, root) => {\n  if (!isElement(root)) {\n    root = document\n  }\n  return arrayFrom(root.querySelectorAll(selector))\n}\n\n// Select a single element, returns null if not found\nexport const select = (selector, root) => {\n  if (!isElement(root)) {\n    root = document\n  }\n  return root.querySelector(selector) || null\n}\n\n// Determine if an element matches a selector\nexport const matches = (el, selector) => {\n  if (!isElement(el)) {\n    return false\n  }\n\n  // https://developer.mozilla.org/en-US/docs/Web/API/Element/matches#Polyfill\n  // Prefer native implementations over polyfill function\n  const proto = Element.prototype\n  const Matches = proto.matches ||\n        proto.matchesSelector ||\n        proto.mozMatchesSelector ||\n        proto.msMatchesSelector ||\n        proto.oMatchesSelector ||\n        proto.webkitMatchesSelector ||\n        /* istanbul ignore next */\n        function (sel) {\n          const element = this\n          const m = selectAll(sel, element.document || element.ownerDocument)\n          let i = m.length\n          // eslint-disable-next-line no-empty\n          while (--i >= 0 && m.item(i) !== element) {}\n          return i > -1\n        }\n\n  return Matches.call(el, selector)\n}\n\n// Finds closest element matching selector. Returns null if not found\nexport const closest = (selector, root) => {\n  if (!isElement(root)) {\n    return null\n  }\n\n  // https://developer.mozilla.org/en-US/docs/Web/API/Element/closest\n  // Since we dont support IE < 10, we can use the \"Matches\" version of the polyfill for speed\n  // Prefer native implementation over polyfill function\n  const Closest = Element.prototype.closest ||\n                  /* istanbul ignore next */\n                  function (sel) {\n                    let element = this\n                    if (!document.documentElement.contains(element)) {\n                      return null\n                    }\n                    do {\n                      // Use our \"patched\" matches function\n                      if (matches(element, sel)) {\n                        return element\n                      }\n                      element = element.parentElement\n                    } while (element !== null)\n                    return null\n                  }\n\n  const el = Closest.call(root, selector)\n  // Emulate jQuery closest and return null if match is the passed in element (root)\n  return el === root ? null : el\n}\n\n// Get an element given an ID\nexport const getById = id => {\n  return document.getElementById(/^#/.test(id) ? id.slice(1) : id) || null\n}\n\n// Add a class to an element\nexport const addClass = (el, className) => {\n  if (className && isElement(el)) {\n    el.classList.add(className)\n  }\n}\n\n// Remove a class from an element\nexport const removeClass = (el, className) => {\n  if (className && isElement(el)) {\n    el.classList.remove(className)\n  }\n}\n\n// Test if an element has a class\nexport const hasClass = (el, className) => {\n  if (className && isElement(el)) {\n    return el.classList.contains(className)\n  }\n  return false\n}\n\n// Set an attribute on an element\nexport const setAttr = (el, attr, value) => {\n  if (attr && isElement(el)) {\n    el.setAttribute(attr, value)\n  }\n}\n\n// Remove an attribute from an element\nexport const removeAttr = (el, attr) => {\n  if (attr && isElement(el)) {\n    el.removeAttribute(attr)\n  }\n}\n\n// Get an attribute value from an element (returns null if not found)\nexport const getAttr = (el, attr) => {\n  if (attr && isElement(el)) {\n    return el.getAttribute(attr)\n  }\n  return null\n}\n\n// Determine if an attribute exists on an element (returns true or false, or null if element not found)\nexport const hasAttr = (el, attr) => {\n  if (attr && isElement(el)) {\n    return el.hasAttribute(attr)\n  }\n  return null\n}\n\n// Return the Bounding Client Rec of an element. Retruns null if not an element\nexport const getBCR = el => {\n  return isElement(el) ? el.getBoundingClientRect() : null\n}\n\n// Get computed style object for an element\nexport const getCS = el => {\n  return isElement(el) ? window.getComputedStyle(el) : {}\n}\n\n// Return an element's offset wrt document element\n// https://j11y.io/jquery/#v=git&fn=jQuery.fn.offset\nexport const offset = el => {\n  if (isElement(el)) {\n    if (!el.getClientRects().length) {\n      return { top: 0, left: 0 }\n    }\n    const bcr = getBCR(el)\n    const win = el.ownerDocument.defaultView\n    return {\n      top: bcr.top + win.pageYOffset,\n      left: bcr.left + win.pageXOffset\n    }\n  }\n}\n\n// Return an element's offset wrt to it's offsetParent\n// https://j11y.io/jquery/#v=git&fn=jQuery.fn.position\nexport const position = el => {\n  if (!isElement(el)) {\n    return\n  }\n  let parentOffset = { top: 0, left: 0 }\n  let offsetSelf\n  let offsetParent\n  if (getCS(el).position === 'fixed') {\n    offsetSelf = getBCR(el)\n  } else {\n    offsetSelf = offset(el)\n    const doc = el.ownerDocument\n    offsetParent = el.offsetParent || doc.documentElement\n    while (offsetParent &&\n                (offsetParent === doc.body || offsetParent === doc.documentElement) &&\n                getCS(offsetParent).position === 'static') {\n      offsetParent = offsetParent.parentNode\n    }\n    if (offsetParent && offsetParent !== el && offsetParent.nodeType === Node.ELEMENT_NODE) {\n      parentOffset = offset(offsetParent)\n      parentOffset.top += parseFloat(getCS(offsetParent).borderTopWidth)\n      parentOffset.left += parseFloat(getCS(offsetParent).borderLeftWidth)\n    }\n  }\n  return {\n    top: offsetSelf.top - parentOffset.top - parseFloat(getCS(el).marginTop),\n    left: offsetSelf.left - parentOffset.left - parseFloat(getCS(el).marginLeft)\n  }\n}\n\n// Attach an event listener to an element\nexport const eventOn = (el, evtName, handler) => {\n  if (el && el.addEventListener) {\n    el.addEventListener(evtName, handler)\n  }\n}\n\n// Remove an event listener from an element\nexport const eventOff = (el, evtName, handler) => {\n  if (el && el.removeEventListener) {\n    el.removeEventListener(evtName, handler)\n  }\n}\n",
        "import { mergeData } from 'vue-functional-data-merge'\nimport pluckProps from '../../utils/pluck-props'\nimport { concat } from '../../utils/array'\nimport { assign, keys } from '../../utils/object'\nimport { addClass, removeClass } from '../../utils/dom'\nimport Link, { propsFactory as linkPropsFactory } from '../link/link'\n\nconst btnProps = {\n  block: {\n    type: Boolean,\n    default: false\n  },\n  disabled: {\n    type: Boolean,\n    default: false\n  },\n  size: {\n    type: String,\n    default: null\n  },\n  variant: {\n    type: String,\n    default: null\n  },\n  type: {\n    type: String,\n    default: 'button'\n  },\n  pressed: {\n    // tri-state prop: true, false or null\n    // => on, off, not a toggle\n    type: Boolean,\n    default: null\n  }\n}\n\nlet linkProps = linkPropsFactory()\ndelete linkProps.href.default\ndelete linkProps.to.default\nconst linkPropKeys = keys(linkProps)\n\nexport const props = assign(linkProps, btnProps)\n\nfunction handleFocus (evt) {\n  if (evt.type === 'focusin') {\n    addClass(evt.target, 'focus')\n  } else if (evt.type === 'focusout') {\n    removeClass(evt.target, 'focus')\n  }\n}\n\nexport default {\n  functional: true,\n  props,\n  render (h, { props, data, listeners, children }) {\n    const isLink = Boolean(props.href || props.to)\n    const isToggle = typeof props.pressed === 'boolean'\n    const on = {\n      click (e) {\n        if (props.disabled && e instanceof Event) {\n          e.stopPropagation()\n          e.preventDefault()\n        } else if (isToggle) {\n          // Concat will normalize the value to an array\n          // without double wrapping an array value in an array.\n          concat(listeners['update:pressed']).forEach(fn => {\n            if (typeof fn === 'function') {\n              fn(!props.pressed)\n            }\n          })\n        }\n      }\n    }\n\n    if (isToggle) {\n      on.focusin = handleFocus\n      on.focusout = handleFocus\n    }\n\n    const componentData = {\n      staticClass: 'btn',\n      class: [\n        props.variant ? `btn-${props.variant}` : `btn-secondary`,\n        {\n          [`btn-${props.size}`]: Boolean(props.size),\n          'btn-block': props.block,\n          disabled: props.disabled,\n          active: props.pressed\n        }\n      ],\n      props: isLink ? pluckProps(linkPropKeys, props) : null,\n      attrs: {\n        type: isLink ? null : props.type,\n        disabled: isLink ? null : props.disabled,\n        // Data attribute not used for js logic,\n        // but only for BS4 style selectors.\n        'data-toggle': isToggle ? 'button' : null,\n        'aria-pressed': isToggle ? String(props.pressed) : null,\n        // Tab index is used when the component becomes a link.\n        // Links are tabable, but don't allow disabled,\n        // so we mimic that functionality by disabling tabbing.\n        tabindex:\n          props.disabled && isLink\n            ? '-1'\n            : data.attrs ? data.attrs['tabindex'] : null\n      },\n      on\n    }\n\n    return h(isLink ? Link : 'button', mergeData(data, componentData), children)\n  }\n}\n",
        "import bButton from './button'\nimport bButtonClose from './button-close'\nimport { registerComponents, vueUse } from '../../utils/plugins'\n\nconst components = {\n  bButton,\n  bBtn: bButton,\n  bButtonClose,\n  bBtnClose: bButtonClose\n}\n\nconst VuePlugin = {\n  install (Vue) {\n    registerComponents(Vue, components)\n  }\n}\n\nvueUse(VuePlugin)\n\nexport default VuePlugin\n",
        "import { mergeData } from 'vue-functional-data-merge'\nimport { arrayIncludes } from '../../utils/array'\n\nexport const props = {\n  vertical: {\n    type: Boolean,\n    default: false\n  },\n  size: {\n    type: String,\n    default: null,\n    validator: size => arrayIncludes(['sm', '', 'lg'], size)\n  },\n  tag: {\n    type: String,\n    default: 'div'\n  },\n  ariaRole: {\n    type: String,\n    default: 'group'\n  }\n}\n\nexport default {\n  functional: true,\n  props,\n  render (h, { props, data, children }) {\n    return h(\n      props.tag,\n      mergeData(data, {\n        class: {\n          'btn-group': !props.vertical,\n          'btn-group-vertical': props.vertical,\n          [`btn-group-${props.size}`]: Boolean(props.size)\n        },\n        attrs: { 'role': props.ariaRole }\n      }),\n      children\n    )\n  }\n}\n",
        "import bButtonGroup from './button-group'\nimport { registerComponents, vueUse } from '../../utils/plugins'\n\nconst components = {\n  bButtonGroup,\n  bBtnGroup: bButtonGroup\n}\n\nconst VuePlugin = {\n  install (Vue) {\n    registerComponents(Vue, components)\n  }\n}\n\nvueUse(VuePlugin)\n\nexport default VuePlugin\n",
        "/*\n * Key Codes (events)\n */\n\nexport default {\n  SPACE: 32,\n  ENTER: 13,\n  ESC: 27,\n  LEFT: 37,\n  UP: 38,\n  RIGHT: 39,\n  DOWN: 40,\n  PAGEUP: 33,\n  PAGEDOWN: 34,\n  HOME: 36,\n  END: 35\n}\n",
        "import { isVisible, selectAll } from '../../utils/dom'\nimport KeyCodes from '../../utils/key-codes'\n\nconst ITEM_SELECTOR = [\n  '.btn:not(.disabled):not([disabled]):not(.dropdown-item)',\n  '.form-control:not(.disabled):not([disabled])',\n  'select:not(.disabled):not([disabled])',\n  'input[type=\"checkbox\"]:not(.disabled)',\n  'input[type=\"radio\"]:not(.disabled)'\n].join(',')\n\nexport default {\n  render (h) {\n    return h(\n      'div',\n      {\n        class: this.classObject,\n        attrs: {\n          role: 'toolbar',\n          tabindex: this.keyNav ? '0' : null\n        },\n        on: {\n          focusin: this.onFocusin,\n          keydown: this.onKeydown\n        }\n      },\n      [ this.$slots.default ]\n    )\n  },\n  computed: {\n    classObject () {\n      return [\n        'btn-toolbar',\n        (this.justify && !this.vertical) ? 'justify-content-between' : ''\n      ]\n    }\n  },\n  props: {\n    justify: {\n      type: Boolean,\n      default: false\n    },\n    keyNav: {\n      type: Boolean,\n      default: false\n    }\n  },\n  methods: {\n    onFocusin (evt) {\n      if (evt.target === this.$el) {\n        evt.preventDefault()\n        evt.stopPropagation()\n        this.focusFirst(evt)\n      }\n    },\n    onKeydown (evt) {\n      if (!this.keyNav) {\n        return\n      }\n      const key = evt.keyCode\n      const shift = evt.shiftKey\n      if (key === KeyCodes.UP || key === KeyCodes.LEFT) {\n        evt.preventDefault()\n        evt.stopPropagation()\n        if (shift) {\n          this.focusFirst(evt)\n        } else {\n          this.focusNext(evt, true)\n        }\n      } else if (key === KeyCodes.DOWN || key === KeyCodes.RIGHT) {\n        evt.preventDefault()\n        evt.stopPropagation()\n        if (shift) {\n          this.focusLast(evt)\n        } else {\n          this.focusNext(evt, false)\n        }\n      }\n    },\n    setItemFocus (item) {\n      this.$nextTick(() => {\n        item.focus()\n      })\n    },\n    focusNext (evt, prev) {\n      const items = this.getItems()\n      if (items.length < 1) {\n        return\n      }\n      let index = items.indexOf(evt.target)\n      if (prev && index > 0) {\n        index--\n      } else if (!prev && index < items.length - 1) {\n        index++\n      }\n      if (index < 0) {\n        index = 0\n      }\n      this.setItemFocus(items[index])\n    },\n    focusFirst (evt) {\n      const items = this.getItems()\n      if (items.length > 0) {\n        this.setItemFocus(items[0])\n      }\n    },\n    focusLast (evt) {\n      const items = this.getItems()\n      if (items.length > 0) {\n        this.setItemFocus([items.length - 1])\n      }\n    },\n    getItems () {\n      let items = selectAll(ITEM_SELECTOR, this.$el)\n      items.forEach(item => {\n        // Ensure tabfocus is -1 on any new elements\n        item.tabIndex = -1\n      })\n      return items.filter(el => isVisible(el))\n    }\n  },\n  mounted () {\n    if (this.keyNav) {\n      // Pre-set the tabindexes if the markup does not include tabindex=\"-1\" on the toolbar items\n      this.getItems()\n    }\n  }\n}\n",
        "import bButtonToolbar from './button-toolbar'\nimport { registerComponents, vueUse } from '../../utils/plugins'\n\nconst components = {\n  bButtonToolbar,\n  bBtnToolbar: bButtonToolbar\n}\n\nconst VuePlugin = {\n  install (Vue) {\n    registerComponents(Vue, components)\n  }\n}\n\nvueUse(VuePlugin)\n\nexport default VuePlugin\n",
        "import { mergeData } from 'vue-functional-data-merge'\n\nexport const props = {\n  tag: {\n    type: String,\n    default: 'div'\n  }\n}\n\nexport default {\n  props,\n  functional: true,\n  render (h, { props, data, children }) {\n    return h(\n      props.tag,\n      mergeData(data, {\n        staticClass: 'input-group-text'\n      }),\n      children\n    )\n  }\n}\n",
        "import { mergeData } from 'vue-functional-data-merge'\nimport InputGroupText from './input-group-text'\n\nexport const propsFactory = append => ({\n  id: {\n    type: String,\n    default: null\n  },\n  tag: {\n    type: String,\n    default: 'div'\n  },\n  append: {\n    type: Boolean,\n    default: append\n  },\n  isText: {\n    type: Boolean,\n    default: false\n  }\n})\n\nexport default {\n  functional: true,\n  props: propsFactory(false),\n  render (h, { props, data, children }) {\n    return h(\n      props.tag,\n      mergeData(data, {\n        staticClass: `input-group-${props.append ? 'append' : 'prepend'}`,\n        attrs: {\n          id: props.id\n        }\n      }),\n      props.isText ? [\n        h(InputGroupText, children)\n      ] : children\n    )\n  }\n}\n",
        "import InputGroupAddon, { propsFactory } from './input-group-addon'\n\nexport default {\n  functional: true,\n  props: propsFactory(false),\n  render: InputGroupAddon.render\n}\n",
        "import InputGroupAddon, { propsFactory } from './input-group-addon'\n\nexport default {\n  functional: true,\n  props: propsFactory(true),\n  render: InputGroupAddon.render\n}\n","import { mergeData } from 'vue-functional-data-merge'\nimport InputGroupPrepend from './input-group-prepend'\nimport InputGroupAppend from './input-group-append'\nimport InputGroupText from './input-group-text'\n\nexport const props = {\n  id: {\n    type: String,\n    default: null\n  },\n  size: {\n    type: String,\n    default: null\n  },\n  prepend: {\n    type: String,\n    default: null\n  },\n  append: {\n    type: String,\n    default: null\n  },\n  tag: {\n    type: String,\n    default: 'div'\n  }\n}\n\nexport default {\n  functional: true,\n  props: props,\n  render (h, { props, data, slots }) {\n    const $slots = slots()\n\n    const childNodes = []\n\n    // Prepend prop\n    if (props.prepend) {\n      childNodes.push(\n        h(InputGroupPrepend, [\n          h(InputGroupText, { domProps: { innerHTML: props.prepend } })\n        ])\n      )\n    }\n\n    // Prepend slot\n    if ($slots.prepend) {\n      childNodes.push(h(InputGroupPrepend, $slots.prepend))\n    }\n\n    // Default slot\n    childNodes.push($slots.default)\n\n    // Append prop\n    if (props.append) {\n      childNodes.push(\n        h(InputGroupAppend, [\n          h(InputGroupText, { domProps: { innerHTML: props.append } })\n        ])\n      )\n    }\n\n    // Append slot\n    if ($slots.append) {\n      childNodes.push(h